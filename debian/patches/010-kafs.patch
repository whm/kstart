Index: kstart/framework.c
===================================================================
--- kstart.orig/framework.c	2021-03-19 06:52:16.257520330 +0000
+++ kstart/framework.c	2021-03-19 06:52:16.229519413 +0000
@@ -309,13 +309,15 @@
      */
     if (config->command != NULL && config->do_aklog) {
         if (k_hasafs()) {
-            if (k_setpag() < 0) {
-                syswarn("unable to create PAG");
+            if (!has_kAFS()) {
+                if (k_setpag() < 0) {
+                    syswarn("unable to create PAG");
+                    exit_cleanup(ctx, config, 1);
+                }
+            } else {
+                warn("cannot create PAG: AFS support is not available");
                 exit_cleanup(ctx, config, 1);
             }
-        } else {
-            warn("cannot create PAG: AFS support is not available");
-            exit_cleanup(ctx, config, 1);
         }
     }
 
Index: kstart/kafs/kafs.c
===================================================================
--- kstart.orig/kafs/kafs.c	2021-03-19 06:52:16.257520330 +0000
+++ kstart/kafs/kafs.c	2021-03-19 06:52:16.229519413 +0000
@@ -52,6 +52,9 @@
 #include <sys/ioctl.h>
 #include <sys/stat.h>
 
+#include <util/command.h>
+#include <util/messages.h>
+
 /* Used for unused parameters to silence gcc warnings. */
 #define UNUSED __attribute__((__unused__))
 
@@ -129,6 +132,22 @@
 
 
 /*
+ * Check to see whether kAFS is available.
+ */
+int
+has_kAFS(void)
+{
+    struct stat status;
+    int code, have_kAFS = 0;
+
+    code = stat("/proc/fs/afs", &status);
+    if (code == 0)
+       have_kAFS = 1;
+    return have_kAFS;
+}
+
+
+/*
  * Probe to see if AFS is available and we can make system calls successfully.
  * This just attempts the set token system call with an empty token structure,
  * which will be a no-op in the kernel.
@@ -180,16 +199,27 @@
 
 
 /*
- * The unlog system call.  This destroys any tokens in the current PAG.
+ * The unlog system call.  This destroys any tokens by calling the
+ * external progam unlog.
  */
 int
 k_unlog(void)
 {
-    struct ViceIoctl iob;
+    const char *akunlog = NULL;
+    const char **args   = NULL;
+    pid_t child = 0;
+    int *status = 0;
+
+    akunlog = getenv("AKUNLOG");
+    if (akunlog == NULL) {
+        akunlog = "/usr/bin/unlog";
+    }
+
+    child = command_start(akunlog, args);
+    if (child < 0) {
+        syswarn("unable to run command %s", akunlog);
+    }
+    command_finish(child, status);
 
-    iob.in = NULL;
-    iob.in_size = 0;
-    iob.out = NULL;
-    iob.out_size = 0;
-    return k_pioctl(NULL, _IOW('V', 9, struct ViceIoctl), &iob, 0);
+    return 0;
 }
Index: kstart/portable/k_haspag.c
===================================================================
--- kstart.orig/portable/k_haspag.c	2021-03-19 06:52:16.257520330 +0000
+++ kstart/portable/k_haspag.c	2021-03-19 06:52:16.229519413 +0000
@@ -44,6 +44,15 @@
     gid_t *groups;
     uint32_t pag, g0, g1, hi, lo;
 
+    /*
+     * Just return if AFS is not available.  The assumption is that
+     * aklog-kafs was used to acquire tokens and a PAG was not
+     * created.
+     */
+    if (!k_hasafs() || has_kAFS()) {
+        return 0;
+    }
+
     /* First, try the system call if k_pioctl is available. */
 #ifdef HAVE_K_PIOCTL
     int result;
@@ -63,6 +72,9 @@
      * system call.  Fall back on analyzing the groups.
      */
     ngroups = getgroups(0, NULL);
+    if (ngroups < 0) {
+        return 0;
+    }
     groups = calloc(ngroups, sizeof(*groups));
     if (groups == NULL)
         return 0;
Index: kstart/portable/kafs.h
===================================================================
--- kstart.orig/portable/kafs.h	2021-03-19 06:52:16.257520330 +0000
+++ kstart/portable/kafs.h	2021-03-19 06:52:16.229519413 +0000
@@ -70,6 +70,7 @@
     short in_size;
     short out_size;
 };
+int has_kAFS(void);
 int k_hasafs(void);
 int k_pioctl(char *, struct ViceIoctl *, void *, int);
 int k_setpag(void);
@@ -91,6 +92,7 @@
 int lsetpag(void);
 int lpioctl(char *, int, void *, int);
 # endif
+# define has_kAFS()
 # define k_hasafs()           (1)
 # define k_pioctl(p, c, a, f) lpioctl((p), (c), (a), (f))
 # define k_setpag()           lsetpag()
@@ -111,6 +113,7 @@
 /* Default to a hidden visibility for all portability functions. */
 #pragma GCC visibility push(hidden)
 
+int has_kAFS(void);
 int k_hasafs(void);
 int k_haspag(void);
 int k_pioctl(char *, int, struct ViceIoctl *, int);
@@ -123,6 +126,7 @@
 /* We have no kafs implementation available. */
 #else
 # undef HAVE_KAFS
+# define has_kAFS()           (0)
 # define k_hasafs()           (0)
 # define k_haspag()           (0)
 # define k_pioctl(p, c, a, f) (errno = ENOSYS, -1)
Index: kstart/Makefile.am
===================================================================
--- kstart.orig/Makefile.am	2021-03-15 00:56:51.543729773 +0000
+++ kstart/Makefile.am	2021-03-19 07:04:15.301077640 +0000
@@ -136,9 +136,9 @@
 tests_kafs_haspag_t_LDFLAGS = $(KAFS_LDFLAGS)
 if NEED_KAFS
     tests_kafs_basic_LDADD = kafs/libkafs.a portable/libportable.a \
-	$(KAFS_LIBS)
+	util/libutil.a $(KAFS_LIBS)
     tests_kafs_haspag_t_LDADD = kafs/libkafs.a tests/tap/libtap.a \
-	portable/libportable.a $(KAFS_LIBS)
+	util/libutil.a portable/libportable.a $(KAFS_LIBS)
 else
     tests_kafs_basic_LDADD = portable/libportable.a $(KAFS_LIBS)
     tests_kafs_haspag_t_LDADD = tests/tap/libtap.a portable/libportable.a \
